/*
###################################
* Media queries                   *
###################################
*/
@mixin until($breakpoint){
  @media screen and (max-width: map-get($breakpoints, $breakpoint)){
    @content;
  }
}
@mixin after($breakpoint){
  @media screen and (min-width: map-get($breakpoints, $breakpoint)){
    @content;
  }
}
@mixin between($start, $end){
  @media screen and (min-width: map-get($breakpoints, $start)) and (max-width: map-get($breakpoints, $end)){
    @content;
  }
}

/*
###################################
* Utilities                       *
###################################
*/
@mixin clearfix {
  &:after {
    content: '';
    display: block;
    clear: both;
  }
}

@mixin hide-block {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

@mixin hide-text {
  clip: rect(1px, 1px, 1px, 1px);
  position: absolute !important;
  height: 1px;
  width: 1px;
  line-height: 1px;
  overflow: hidden;
}

@mixin ellipsis($axis, $param) {
  overflow: hidden;
	text-overflow: ellipsis;
  white-space: nowrap;
  @if($axis == 'width'){
    max-width: $param;
  } @else if($axis == 'height'){
    max-height: $param;
  }
}

@mixin calc-rem($property, $value, $important: false) {

	$remSize: $value / $font-size;
	$hasImportant: null;

	@if $important == true or $important == important {
		$hasImportant: !important;
	}

	#{$property}: $value $hasImportant;
	#{$property}: #{$remSize}rem $hasImportant;
}

@mixin font-size($size,$unit:rem) {
	font-size: calculateRem($size,$unit);
}

@mixin default-focus(){
  &:focus{
    -webkit-appearance: push-button;
  }
}

/*
###################################
* Modifiers to use                *
* while working on responsiveness *
###################################
*/

@mixin flow($axis, $param) {
  flex-flow: unquote($axis) unquote($param);
}

@mixin content($param) {
  justify-content: unquote($param);
}

@mixin content-align($param) {
  align-content: unquote($param);
}

@mixin items($param) {
  align-items: unquote($param);
}

@mixin self($param) {
  align-self: unquote($param);
}

@mixin can($param) {
  @if($param=='grow') {
    flex-grow: 1;
  } @else if($param=='shrink') {
    flex-shrink: 1;
  }
}

@mixin cant($param) {
  @if($param=='grow') {
    flex-grow: 0;
  } @else if($param=='shrink') {
    flex-shrink: 0;
  }
}

@mixin order($param){
  @if($param > $columns){
    $param: $columns
  }
  order: $param;
}

@mixin floatTo($param){
  float: unquote($param);
}

@mixin is($param){
  @if($param == 'clearfix'){
    @include clearfix();
  } @else if($param == 'inline'){
    font-size: 0;
    & > *{
      font-size: $font-size;
    }
  } @else if($param == 'fixed'){
    position: fixed;
  } @else if($param == 'absolute'){
    position: absolute;
  } @else if($param == 'flex'){
    display:flex;
  } @else if($param == 'centered'){
    margin: 0 auto;
  } @else if($param == 'round'){
    border-radius: 50%;
  }  @else if($param == 'hidden'){
    @include hide-block;
  } @else if($param == 'page-wide'){
    width:100%;
    height:100%;
  } @else if($param == 'blunt'){
    border-radius: 5px;
  } @else if($param == 'inline-block'){
    display:inline-block;
  } @else if($param == 'block'){
    display:block;
  }
}

@mixin has($param){
  @if($param == 'rounded-borders'){
    border-radius: 5px;
  } @else if($param == 'text-left'){
    text-align: left;
  } @else if($param == 'text-center'){
    text-align: center;
  } @else if($param == 'text-right'){
    text-align: right;
  }
}

@mixin fly($param, $rotation:0){
  @if($param == 'center'){
    left:50%;
    top:50%;
    transform:translate(-50%, -50%);
  } @else if($param == 'center-left'){
    top:50%;
    left:0;
    @if($rotation != 0){
      transform: translateY(-50%) rotate($rotation#{'deg'});
    } @else {
      transform: translateY(-50%);
    }
  } @else if($param == 'center-right'){
    top:50%;
    right: 0;
    transform:translateY(-50%);
  } @else if($param == 'center-bottom'){
    bottom:0;
    left: 50%;
    transform:translateX(-50%);
  } @else if($param == 'center-top'){
    top:0;
    left: 50%;
    @if($rotation != 0){
      transform: translateX(-50%) rotate($rotation#{'deg'});
    } @else {
      transform: translateX(-50%);
    }
  } @else if($param == 'top-left'){
    left:0;
    top:0;
  } @else if($param == 'top-right'){
    top:0;
    right:0;
  } @else if($param == 'bottom-left'){
    bottom:0;
    left:0;
  } @else if($param == 'bottom-right'){
    bottom:0;
    right:0;
  }
}

@mixin reset($param){
  @if($param == 'bot'){
    bottom:0;
  } @else if($param == 'top'){
    top:0;
  } @else if($param == 'left'){
    left:0;
  } @else if($param == 'right'){
    right:0;
  } @else if($param == 'padding'){
    margin-left: -$gutter;
    margin-right: -$gutter;
  }
}

@mixin setIndex($param){
  z-index: $param;
}

@mixin vAlign($param){
  vertical-align: unquote($param);
}